unit Login;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Imaging.jpeg, Vcl.ExtCtrls,
  Vcl.Imaging.pngimage, Vcl.StdCtrls, Vcl.Buttons;

type
  TFrmLogin = class(TForm)
    Panel1: TPanel;
    imgFundo: TImage;
    pnlLogin: TPanel;
    imgLogin: TImage;
    EdtUsuario: TEdit;
    EdtSenha: TEdit;
    btnLogin: TSpeedButton;
    procedure FormCanResize(Sender: TObject; var NewWidth, NewHeight: Integer;
      var Resize: Boolean);
    procedure btnLoginClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }
    procedure verificarLicenca;
    procedure centralizarPainel;
    procedure login;
  public
    { Public declarations }
  end;

var
  FrmLogin: TFrmLogin;

implementation

{$R *.dfm}

uses Menu, Modulo, Caixa, ConfigurarBd, Ativacao;

procedure TFrmLogin.btnLoginClick(Sender: TObject);
begin
     if Trim(EdtUsuario.Text) = '' then
     begin
         MessageDlg('Preencha o Usuário!', mtInformation, mbOKCancel, 0);
         EdtUsuario.SetFocus;
         exit;
     end;

      if Trim(EdtSenha.Text) = '' then
     begin
         MessageDlg('Preencha a Senha!', mtInformation, mbOKCancel, 0);
         EdtSenha.SetFocus;
         exit;
     end;


     login;
end;

procedure TFrmLogin.centralizarPainel;
begin
    pnlLogin.Top := (self.Height div 2) - (pnlLogin.Height div 2);
    pnlLogin.Left := (self.Width div 2) - (pnlLogin.Width div 2);
end;

procedure TFrmLogin.FormCanResize(Sender: TObject; var NewWidth,
  NewHeight: Integer; var Resize: Boolean);
begin
     centralizarPainel;
end;

procedure TFrmLogin.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
 if key = 13 then
 login;

end;

procedure TFrmLogin.FormShow(Sender: TObject);
var
rgn: HRGN;
dc : HDC;

 begin
      //EFEITO VISUAL ARREDONDAR IMAGEM MENU
      rgn := CreateRoundRectRgn(5, 5, imgLogin.Width, imgLogin.Height, 19, 19);
      dc := GetDC(pnlLogin.Handle);
      SetWindowRgn(pnlLogin.Handle, rgn, true);
      ReleaseDC(pnlLogin.Handle, dc);
      DeleteObject(rgn);
      //verificação de licença
        verificarLicenca;


 end;

procedure TFrmLogin.login;
begin
//AQUI VIRA O CÓDIGO DE LOGIN

       dm.query_usuarios.Close;
       dm.query_usuarios.SQL.Clear;
       dm.query_usuarios.SQL.Add('SELECT * from usuarios where usuario = :usuario and senha = :senha');
        dm.query_usuarios.ParamByName('usuario').Value := edtUsuario.Text;
         dm.query_usuarios.ParamByName('senha').Value := edtSenha.Text;
       dm.query_usuarios.Open;

       if not dm.query_usuarios.isEmpty then
       begin
         nomeUsuario :=  dm.query_usuarios['nome'];
         cargoUsuario :=  dm.query_usuarios['cargo'];

         //VERIFICAR SE QUEM LOGOU FOI UM OPERADOR DE CAIXA
         if cargoUsuario = 'Operador de Caixa' then
         begin
           FrmCaixa := TFrmCaixa.Create(FrmLogin);
           EdtSenha.Text := '';
           statusCaixa := 'Abertura';
           FrmCaixa.ShowModal;

           exit;
         end;


         FrmMenu := TFrmMenu.Create(FrmLogin);
         EdtSenha.Text := '';
         FrmMenu.ShowModal;

          end
          else
          begin
           MessageDlg('Os dados estão incorretos!!', mtInformation, mbOKCancel, 0);
           edtusuario.Text := '';
           EdtSenha.Text := '';
           edtUsuario.SetFocus;
       end;




end;

procedure TFrmLogin.verificarLicenca;
var
serialkeyInstalado : string;
Function Crypt(Action, Src: String): String;
Label Fim;
var KeyLen : Integer;
  KeyPos : Integer;
  OffSet : Integer;
  Dest, Key : String;
  SrcPos : Integer;
  SrcAsc : Integer;
  TmpSrcAsc : Integer;
  Range : Integer;
begin
  if (Src = '') Then
  begin
    Result:= '';
    Goto Fim;
  end;
  Key :=
'YUQL23KL23DF90WI5E1JAS467NMCXXL6JAOAUWWMCL0AOMM4A4VZYW9KHJUI2347EJHJKDF3424SKL K3LAKDJSL9RTIKJ';
  Dest := '';
  KeyLen := Length(Key);
  KeyPos := 0;
  SrcPos := 0;
  SrcAsc := 0;
  Range := 256;
  if (Action = UpperCase('C')) then
  begin
    Randomize;
    OffSet := Random(Range);
    Dest := Format('%1.2x',[OffSet]);
    for SrcPos := 1 to Length(Src) do
    begin
      Application.ProcessMessages;
      SrcAsc := (Ord(Src[SrcPos]) + OffSet) Mod 255;
      if KeyPos < KeyLen then KeyPos := KeyPos + 1 else KeyPos := 1;
      SrcAsc := SrcAsc Xor Ord(Key[KeyPos]);
      Dest := Dest + Format('%1.2x',[SrcAsc]);
      OffSet := SrcAsc;
    end;
  end
  Else if (Action = UpperCase('D')) then
  begin
    OffSet := StrToInt('$'+ copy(Src,1,2));
    SrcPos := 3;
  repeat
    SrcAsc := StrToInt('$'+ copy(Src,SrcPos,2));
    if (KeyPos < KeyLen) Then KeyPos := KeyPos + 1 else KeyPos := 1;
    TmpSrcAsc := SrcAsc Xor Ord(Key[KeyPos]);
    if TmpSrcAsc <= OffSet then TmpSrcAsc := 255 + TmpSrcAsc - OffSet
    else TmpSrcAsc := TmpSrcAsc - OffSet;
    Dest := Dest + Chr(TmpSrcAsc);
    OffSet := SrcAsc;
    SrcPos := SrcPos + 2;
  until (SrcPos >= Length(Src));
  end;
  Result:= Dest;
  Fim:
end;
begin


       dm.query_registro.Close;
       dm.query_registro.SQL.Clear;
       dm.query_registro.SQL.Add('SELECT * from registro');
       //dm.query_registro.ParamByName('serial').Value := serialKey;
       dm.query_registro.Open;

        if dm.query_registro.isEmpty then
                   begin

                     FrmAtivacao := TFrmAtivacao.Create(self);
                     FrmAtivacao.ShowModal;
                     exit;
                   end
                   else
                   begin
                       //serialKeyCalculo := StrToFloat(dm.query_registro.FieldByName('serialkey').Value);
                       numeroInstalacao := Crypt('D', dm.query_registro.FieldByName('numero').Value);
                       serialkeyInstalado := Crypt('D',dm.query_registro.FieldByName('serialkey').Value);
                       //calculo da validação




                          //Usa-se C para Criptografar e D para Descriptografar
                          //Ex de Criptografia:

                              if numeroInstalacao <> serialkeyInstalado then
                              begin
                                FrmAtivacao := TFrmAtivacao.Create(self);
                                FrmAtivacao.ShowModal;
                                exit;

                              end
                              else
                              begin
                              close;

                              end;



                          //Ex: de Descriptografia
                          //editSeriallicenca.text:= Crypt('D',Edit1.text);



                         //if serialKeyCalculo ='' then
                         //begin
                         //chamada := 'serialinvalido';
                       
                     end;






end;

end.
